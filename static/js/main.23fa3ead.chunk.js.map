{"version":3,"sources":["components/TodosContext/TodosContext.tsx","components/TodoApp/TodoApp.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/helpers.tsx","components/TodosFilter/TodosFilter.tsx","App.tsx","index.js"],"names":["TodosContext","React","createContext","todos","setTodos","TodosProvider","children","useLocalStorage","contextValue","useMemo","Provider","value","TodoApp","useContext","useState","newTodo","setNewTodo","onSubmit","event","preventDefault","length","todo","id","Date","title","completed","type","className","placeholder","onChange","e","target","TodoItem","props","changeStatus","removeTodo","editTodoId","setEditTodoId","editValue","setEditValue","inputElement","useRef","useEffect","current","focus","updateTodos","map","currTodo","updateValue","onDoubleClick","checked","onClick","ref","onKeyDown","key","onBlur","TodoList","memo","todoWithNewStatus","updatedTodo","filter","path","filterCompleteTodo","filterActiveTodo","exact","showAllTodo","TodosFilter","to","activeClassName","App","notCompletedTodos","every","todosWithNewStatus","htmlFor","hidden","some","updatedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23fa3ead.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useMemo } from 'react';\nimport { useLocalStorage } from '@penseapp/uselocalstorage';\n\nexport type Todo = {\n  id: number,\n  title: string,\n  completed: boolean,\n};\n\ntype ContextProps = {\n  todos: Todo[],\n  setTodos: Dispatch<SetStateAction<Todo[]>>,\n};\n\nconst contextProps = {\n  todos: [],\n  setTodos: () => {},\n};\n\ntype Children = {\n  children: Children,\n}\n\nexport const TodosContext = React.createContext<ContextProps>(contextProps);\n\nexport const TodosProvider = ({ children }: Children) => {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n\n  const contextValue = useMemo(() => ({\n    todos,\n    setTodos,\n  }), [todos, setTodos]);\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import React, { FormEvent, useContext, useState } from 'react';\nimport { TodosContext } from '../TodosContext';\n\nexport const TodoApp = () => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [newTodo, setNewTodo] = useState('');\n\n  const createTodo = () => ({\n    id: +new Date(),\n    title: newTodo,\n    completed: false,\n  });\n\n  const addNewTodo = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!newTodo.length) {\n      return;\n    }\n\n    const todo = createTodo();\n\n    setTodos([todo, ...todos]);\n    setNewTodo('');\n  };\n\n  return (\n    <form onSubmit={addNewTodo}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={e => setNewTodo(e.target.value)}\n      />\n    </form>\n  );\n};\n","import React, { ChangeEventHandler, MouseEventHandler, FocusEvent, useEffect, useRef, useState, useContext } from 'react';\nimport { Todo, TodosContext } from '../TodosContext';\nimport className from 'classnames';\n\ninterface Props {\n  todo: Todo,\n  changeStatus: ChangeEventHandler,\n  removeTodo: MouseEventHandler,\n}\n\nexport const TodoItem = (props: Props) => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const { todo, changeStatus, removeTodo } = props;\n  const [editTodoId, setEditTodoId] = useState(0);\n  const [editValue, setEditValue] = useState(todo.title);\n  const inputElement = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    if (inputElement.current) {\n      inputElement.current.focus();\n    }\n  });\n\n  const editTodo = () => {\n    setEditTodoId(todo.id);\n  }\n\n  const updateTodos = (value: string) => {\n    setTodos(todos.map((currTodo) => {\n      if (currTodo.id === todo.id) {\n        currTodo.title = value;\n      }\n\n      return { ...currTodo };\n    }));\n  };\n\n  const updateValue = () => {\n    setEditValue(todo.title);\n    setEditTodoId(0);\n  };\n\n  const saveEditKeyDown = (event: any) => {\n    const { value } = event.target;\n    const title = todo.title;\n\n    switch (event.key) {\n      case 'Enter':\n        value.length\n          ? todo.title = value\n          : todo.title = title;\n  \n        updateTodos(value);\n        updateValue();\n        break;\n      case 'Escape':\n        todo.title = title;\n\n        updateValue();\n        break;\n      default:\n        return;\n    }\n  };\n\n  const saveEditBlur = (event: FocusEvent<HTMLInputElement>) => {\n    const { value } = event.target as HTMLInputElement;\n\n    const title = todo.title;\n\n    value.length\n      ? todo.title = value\n      : todo.title = title;\n\n    updateTodos(value);\n    updateValue();\n  };\n\n  return (\n    <>\n      <li\n        id={`${todo.id}`}\n        className={className(\n          {'completed': todo.completed}, \n          {'editing': todo.id === editTodoId}\n        )}\n        onDoubleClick={editTodo}\n      >\n          <div className=\"view\">\n            <input\n              id={`${todo.id}`}\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={changeStatus}\n            />\n            <label>\n              {todo.title}\n            </label>\n            <button\n              id={`${todo.id}`}\n              type=\"button\"\n              className=\"destroy\"\n              onClick={removeTodo}\n            />\n          </div>\n          <input\n            id={`${todo.id}`}\n            type=\"text\"\n            className=\"edit\"\n            value={editValue}\n            ref={inputElement}\n            onChange={({ target }) => setEditValue(target.value)}\n            onKeyDown={saveEditKeyDown}\n            onBlur={saveEditBlur}\n          />\n        </li>\n    </>\n  );\n};\n","import React, { useContext, ChangeEvent, MouseEvent } from 'react';\nimport { Route, Switch } from 'react-router';\nimport { TodoItem } from '../TodoItem';\nimport { TodosContext, Todo } from '../TodosContext';\nimport { filterCompleteTodo, filterActiveTodo, showAllTodo } from '../helpers';\n\nexport const TodoList = React.memo(\n  () => {\n    const { todos, setTodos } = useContext(TodosContext);\n\n    const changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\n      const { id, checked } = event.target;\n\n      const todoWithNewStatus = [...todos].map(\n        (todo) => {\n          if (todo.id === +id) {\n            todo.completed = checked;\n          }\n\n          return {\n            ...todo,\n          };\n        },\n      );\n\n      setTodos(todoWithNewStatus);\n    };\n\n    const removeTodo = (event: MouseEvent) => {\n      const { id } = event.target as HTMLElement;\n      const updatedTodo = todos.filter(todo => todo.id !== +id);\n\n      setTodos(updatedTodo);\n    };\n\n    return (\n      <ul className=\"todo-list\">\n        <Switch>\n          <Route path=\"/completed\">\n            {filterCompleteTodo(todos).map((todo: Todo) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                changeStatus={changeStatus}\n                removeTodo={removeTodo}\n              />\n            ))}\n          </Route>\n          <Route path=\"/active\">\n            {filterActiveTodo(todos).map((todo: Todo) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                changeStatus={changeStatus}\n                removeTodo={removeTodo}\n              />\n            ))}\n          </Route>\n          <Route exact path=\"/\">\n            {showAllTodo(todos).map((todo: Todo) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                changeStatus={changeStatus}\n                removeTodo={removeTodo}\n              />\n            ))}\n          </Route>\n        </Switch>\n      </ul>\n    );\n  }\n);\n","import React from 'react';\nimport { Todo } from './TodosContext';\n\nexport const filterCompleteTodo = (todos: Todo[]): Todo[] => {\n  return todos.filter((todo: Todo) => todo.completed);\n};\n\nexport const filterActiveTodo = (todos: Todo[]): Todo[] => {\n  return todos.filter((todo: Todo) => !todo.completed);\n};\n\nexport const showAllTodo = (todos: Todo[]): Todo[] => {\n  return [...todos];\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const TodosFilter = () => (\n  <ul className=\"filters\">\n    <li>\n      <NavLink\n        to=\"/\"\n        exact\n        activeClassName=\"selected\"\n      >\n        All\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to=\"/active\"\n        activeClassName=\"selected\"\n      >\n        Active\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to=\"/completed\"\n        activeClassName=\"selected\"\n      >\n        Completed\n      </NavLink>\n    </li>\n  </ul>\n);\n","import React, { useContext, ChangeEvent } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosContext } from './components/TodosContext';\nimport { TodosFilter } from './components/TodosFilter';\n\nconst App = React.memo(\n  () => {\n    const { todos, setTodos } = useContext(TodosContext);\n\n    const notCompletedTodos = todos.filter(todo => !todo.completed);\n\n    const changeStatusForAllTodos = (event: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = event.target;\n\n      const todosWithNewStatus = [...todos].map(todo => ({\n        ...todo,\n        completed: checked,\n      }));\n\n      setTodos(todosWithNewStatus);\n    };\n\n    const clearCompleted = () => {\n      const updatedTodos = todos.filter(todo => !todo.completed);\n\n      setTodos(updatedTodos);\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoApp />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todo => todo.completed) && !!todos.length}\n            onChange={changeStatusForAllTodos}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList />\n\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${notCompletedTodos.length} item${notCompletedTodos.length <= 1\n                ? ''\n                : 's'\n              } left`}\n            </span>\n\n            <TodosFilter />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              hidden={!todos.some(todo => todo.completed)}\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n      </section>\n    );\n  },\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\nimport { TodosProvider } from './components/TodosContext';\n\nReactDOM.render(\n  <HashRouter>\n    <TodosProvider>\n      <App />\n    </TodosProvider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}